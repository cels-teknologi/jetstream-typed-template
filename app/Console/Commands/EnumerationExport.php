<?php

namespace App\Console\Commands;

use App\Attributes\Enumerations\NoExport;
use Illuminate\Console\Command;
use Illuminate\Filesystem\Filesystem;
use Symfony\Component\Console\Attribute\AsCommand;

#[AsCommand(name: 'app:enum-export')]
class EnumerationExport extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'app:enum-export
                            {--enum= : The PHP enumeration class-name/FQCN}
                            {--namespace= : The PHP enumerations namespace, default is App\\Enumerations}
                            {--outDir= : The resulting .ts file directory, default is resources/js/enumerations}
                            {--force : Whether to force creation of enum despite #[NoExport]}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Exports enum as a .ts file';

    /**
     * Execute the console command.
     */
    public function handle(Filesystem $filesystem)
    {
        //
        $enum = $this->option('enum');
        $namespace = $this->option('namespace') ?: 'App\\Enumerations\\';
        $outDir = $this->option('outDir') ?: 'resources/js/enumerations';

        if (!$enum) {
            $loader = require __DIR__ . '/../../../vendor/autoload.php';
            foreach ($loader->getClassMap() as $key => $value) {
                if (\str_starts_with($key, $namespace)) {
                    if (!(new \ReflectionClass($key))->isEnum()) {
                        $this->info("Non-enum '{$reflector->getShortName()}' skipped.");
                    }
                    try {
                        $reflector = new \ReflectionEnum($key);
                        $attribute = $reflector->getAttributes(NoExport::class);
                        if ($attribute && !$this->option('force')) {
                            $this->info("Enum '{$reflector->getShortName()}' skipped, reason: NoExport.");
                            continue;
                        }
                        $filesystem->put(
                            \base_path("{$outDir}/{$reflector->getShortName()}.ts"),
                            $this->toFile($key),
                        );
                    } catch (\Exception $e) {
                        $this->error($e->getMessage());
                    }
                }
            }
        }
        else {
            $enum = \enum_exists("{$namespace}{$enum}")
                ? "{$namespace}{$enum}"
                : $enum;

            if (!\enum_exists($enum)) {
                $this->error("Enum '{$enum}' does not exist.");
            }

            $reflector = new \ReflectionEnum($enum);
            $attribute = $reflector->getAttributes(NoExport::class);
            if ($attribute && !$this->option('force')) {
                $this->info("Enum '{$reflector->getShortName()}' skipped, reason: NoExport.");
                return;
            }
            $filesystem->put(
                \base_path("{$outDir}/{$reflector->getShortName()}.ts"),
                $this->toFile($enum),
            );
        }
    }

    protected function toFile(string $enum)
    {
        $reflector = new \ReflectionEnum($enum);
        $cases = \implode("\n  ", \array_filter(\array_map(
            fn($rCase) => $this->toCase($rCase, $reflector->getBackingType()),
            $reflector->getCases(),
        )));

        return <<<JAVASCRIPT
        /* This file is automatically generated. */
        export enum {$reflector->getShortName()} {
          {$cases}
        };

        JAVASCRIPT;
    }

    protected function toCase(\ReflectionEnumUnitCase $case, ?\ReflectionNamedType $type)
    {
        if ($case->getAttributes(NoExport::class) && !$this->option('force')) {
            return null;
        }
        if (!$type) {
            return "{$case->getName()},";
        }
        if ($type->getName() === 'string') {
            return "{$case->getName()} = '{$case->getValue()->value}',";
        } else if ($type->getName() === 'int') {
            return "{$case->getName()} = {$case->getValue()->value},";
        }
    }
}
